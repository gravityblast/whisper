// Code generated by MockGen. DO NOT EDIT.
// Source: ratelimiter/interface.go

// Package ratelimiter is a generated GoMock package.
package ratelimiter

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockInterface) Create(arg0 []byte) error {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterface)(nil).Create), arg0)
}

// Remove mocks base method
func (m *MockInterface) Remove(arg0 []byte, arg1 time.Duration) error {
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockInterfaceMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockInterface)(nil).Remove), arg0, arg1)
}

// TakeAvailable mocks base method
func (m *MockInterface) TakeAvailable(arg0 []byte, arg1 int64) int64 {
	ret := m.ctrl.Call(m, "TakeAvailable", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// TakeAvailable indicates an expected call of TakeAvailable
func (mr *MockInterfaceMockRecorder) TakeAvailable(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeAvailable", reflect.TypeOf((*MockInterface)(nil).TakeAvailable), arg0, arg1)
}

// Available mocks base method
func (m *MockInterface) Available(arg0 []byte) int64 {
	ret := m.ctrl.Call(m, "Available", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Available indicates an expected call of Available
func (mr *MockInterfaceMockRecorder) Available(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Available", reflect.TypeOf((*MockInterface)(nil).Available), arg0)
}

// UpdateConfig mocks base method
func (m *MockInterface) UpdateConfig(arg0 []byte, arg1 Config) error {
	ret := m.ctrl.Call(m, "UpdateConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfig indicates an expected call of UpdateConfig
func (mr *MockInterfaceMockRecorder) UpdateConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockInterface)(nil).UpdateConfig), arg0, arg1)
}

// Config mocks base method
func (m *MockInterface) Config() Config {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockInterfaceMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockInterface)(nil).Config))
}
